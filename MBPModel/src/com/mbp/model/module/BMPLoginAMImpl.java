package com.mbp.model.module;

import com.mbp.model.module.common.BMPLoginAM;
import com.mbp.util.QueryUtils;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.HashMap;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 24 15:12:15 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BMPLoginAMImpl extends ApplicationModuleImpl implements BMPLoginAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BMPLoginAMImpl() {
    }

    /**
     * Container's getter for MovieList1.
     * @return MovieList1
     */
    public ViewObjectImpl getMovieList1() {
        return (ViewObjectImpl)findViewObject("MovieList1");
    }


    /**
     * Container's getter for MovieDetail2.
     * @return MovieDetail2
     */
    public ViewObjectImpl getMovieDetail2() {
        return (ViewObjectImpl)findViewObject("MovieDetail2");
    }

    /**
     * Container's getter for MovieShowtime2.
     * @return MovieShowtime2
     */
    public ViewObjectImpl getMovieShowtime2() {
        return (ViewObjectImpl)findViewObject("MovieShowtime2");
    }

    /**
     * Container's getter for MovieDetailMovieFkLink1.
     * @return MovieDetailMovieFkLink1
     */
    public ViewLinkImpl getMovieDetailMovieFkLink1() {
        return (ViewLinkImpl)findViewLink("MovieDetailMovieFkLink1");
    }

    /**
     * Container's getter for CinemaShowtimeMovieListFkLink1.
     * @return CinemaShowtimeMovieListFkLink1
     */
    public ViewLinkImpl getCinemaShowtimeMovieListFkLink1() {
        return (ViewLinkImpl)findViewLink("CinemaShowtimeMovieListFkLink1");
    }


    /**
     * Container's getter for MovieUser1.
     * @return MovieUser1
     */
    public ViewObjectImpl getMovieUser1() {
        return (ViewObjectImpl)findViewObject("MovieUser1");
    }

    /**
     * Container's getter for Ticket1.
     * @return Ticket1
     */
    public ViewObjectImpl getTicket1() {
        return (ViewObjectImpl)findViewObject("Ticket1");
    }


    /**
     * set the given userName to the bind variable in TicketVO
     * */
    public void setBindVariableForFilterMyOrder(String userName) {
        System.out.println("NSIDE setBindVariableForFilterMyOrder in AM ");
        // 1. Find the view object to filter
        ViewObject vo = this.findViewObject("Ticket1");
        // 2. Create a view criteria row set for this view object
        ViewCriteria vc = vo.createViewCriteria();
        // 3. Use the view criteria to create one or more view criteria rows
        ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
        // 4. Set attribute values to filter on in appropriate view criteria rows
        vcr1.setAttribute("MovieUserEO.FIRST_NAME", userName);
        // 5. Add the view criteria rows to the view critera row set
        vc.add(vcr1);
        // 6. Apply the view criteria to the view object
        vo.applyViewCriteria(vc);
        // 7. Execute the query
        vo.executeQuery();
    }
    
    /**
     * Via username and passward validate login process
     * @param username
     * @param passward
     * @return boolean
     * */
    public boolean findUserByAttr(String username, String passward){
        Map attrs = new HashMap();
        
        attrs.put("FirstName", username);
        attrs.put("Passward", passward);
        
        // using given data to query user info
        Row user = QueryUtils.qryOneDataByVO(this.getMovieUser1(), attrs);
        
        if(user != null) {
            return true;    
        }
        return false;    
    }
    
    /**
     * via given parameter from page to create a ticket for record
     * @param username
     * @param pass
     * @param showTime
     * @param movieName
     * @param price
     * @param tickets
     * @return action result for page render
     * */
    public String createBooking(String username, String pass, String showTime, String movieName, double price, int tickets) {
        // get parameter for insert DDL
        int ownerId = getUserID(username, pass);
        int movieId = getMovieID(movieName);
        // get Screen Number of Avaliable Set
        int screenNumber = getSNorAS(showTime, movieName, "getScreenNumber");
        
        // construct insert DDL
        String strQuery =
            "INSERT INTO MBP_TICKET values" + 
            "(   MBP_TICKET_SEQ.NEXTVAL, " + 
                 ownerId + ", " + 
                 movieId + ", " +
                 screenNumber + ", '" + 
                 showTime + "', " +
                 tickets + ", (" +
                 price * tickets + "), SYSDATE)";
    
        // get connection
        DBTransaction dbTransaction = this.getDBTransaction();
        Statement stmt = dbTransaction.createStatement(1);

        int result = 0;

        try {
            result = stmt.executeUpdate(strQuery);
            dbTransaction.commit();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        System.out.println("Create ticket status(0-fails, 1-success) --- " + result);
        if(result > 0) {
            updateAvaliableSeat(tickets * (-1), screenNumber, showTime);
            return "book";    
        } else{
            return "fails";
        }   
    }
    
    /**
     * via given price, username, password to calculate discount price
     * @param
     * @param
     * @param
     * @return dicount price
     * */
    public double calDiscountPrice(String username, String password, int price){
        // based on given user info to get vip LEVEL
        int VIP_LEVEL = getUserLevel(username, password);
        double disPrice = 0;
        // based on different VIP level to calculate discount price
        switch (VIP_LEVEL) {
            case 0: disPrice = price;
                    break;
            case 1: disPrice = price * 0.95;
                    break;
            case 2: disPrice = price * 0.88;
                    break;
            case 3: disPrice = price * 0.75;
                    break;
            case 4: disPrice = price * 0.6;
                    break;
            case 5: disPrice = price * 0.4;
                    break;
        }
        return disPrice;
    }
    
    /**
     * via given showtime, movieName return avaliable seat number
     * */
    public int getAvaliableSeat(String showTime, String movieName) {
        // get Screen Number of Avaliable Set
        int avaliableSeat = getSNorAS(showTime, movieName, "getAvaliableSeat");
        return avaliableSeat;
    }
    
    // via given parameter to query user ID
    public void updateAvaliableSeat(int seatNumber, int screenNumber, String showTime){
        System.out.println("Starting update seat avaliable number with --- "
                    + "\n   seat number:        " + seatNumber
                    + "\n   screen number:      " + screenNumber
                    + "\n   show time:          " + showTime);
        
        // construct query DDL based on input parameters
        String strUpdate =
            "UPDATE MBP_MOVIE_SHOWTIME " +
            "   SET AVALIABLE_SEAT = AVALIABLE_SEAT + (" + seatNumber + ")" + 
            "   WHERE SHOWTIME = '" + showTime + "' " + 
            "   AND SCREEN_NUMBER = " + screenNumber;

        // get connection
        DBTransaction dbTransaction = this.getDBTransaction();
        Statement stmt = dbTransaction.createStatement(1);;
        
        int result = 0;
        try {
            // execute query and get result
            result = stmt.executeUpdate(strUpdate);
            dbTransaction.commit();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        System.out.println("Updated seat avaliable number status(0-fails, 1-success) --- " + result);
    }
    
    // via given parameter to query user ID
    private int getUserID(String username, String pass){
        // construct query DDL based on input parameters
        String strQuery =
            "SELECT USER_ID FROM MBP_MOVIE_USER WHERE FIRST_NAME = '" + username + "' AND PASSWARD = '" + pass + "'";

        // get connection
        DBTransaction dbTransaction = this.getDBTransaction();
        Statement stmt = dbTransaction.createStatement(1);;
        
        int userId = 0;
        try {
            // execute query and get result
            ResultSet result = stmt.executeQuery(strQuery);
            while(result.next()){
                userId = result.getInt("USER_ID");
                System.out.println("Get User ID for ( " + username + " ) is -- " + userId);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return userId;
    }
    
    // via given parameter to query user VIP level
    private int getUserLevel(String username, String pass){
        // construct query DDL based on input parameters
        String strQuery =
            "SELECT VIP_LEVEL FROM MBP_MOVIE_USER WHERE FIRST_NAME = '" + username + "' AND PASSWARD = '" + pass + "'";

        // get connection
        DBTransaction dbTransaction = this.getDBTransaction();
        Statement stmt = dbTransaction.createStatement(1);;
        
        int level = 0;
        try {
            // execute query and get result
            ResultSet result = stmt.executeQuery(strQuery);
            while(result.next()){
                level = result.getInt("VIP_LEVEL");
                System.out.println("Get VIP LEVEL for ( " + username + " ) is -- " + level);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return level;
    }
    
    // via given parameter to query movie ID
    private int getMovieID(String movieName){
        // construct query DDL based on input parameters
        String strQuery =
            "SELECT MOVIE_ID FROM MBP_MOVIE_LIST WHERE MOVIE_NAME = '" + movieName + "'";

        // get connection
        DBTransaction dbTransaction = this.getDBTransaction();
        Statement stmt = dbTransaction.createStatement(1);;
        
        int movieId = 0;
        try {
            // execute query and get result
            ResultSet result = stmt.executeQuery(strQuery);
            while(result.next()){
                movieId = result.getInt("MOVIE_ID");
                System.out.println("Get Movie ID --- " + movieId);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return movieId;
    }
    
    // via given parameter to query SN screen number or AS avaliable seat
    private int getSNorAS(String showTime, String movieName, String flag){
        // construct query DDL based on input parameters
        String strQuery =
            "SELECT SCREEN_NUMBER, AVALIABLE_SEAT FROM MBP_MOVIE_SHOWTIME WHERE MOVIE_NAME = '" + movieName + "' AND SHOWTIME = '" + showTime + "'";

        // get connection
        DBTransaction dbTransaction = this.getDBTransaction();
        Statement stmt = dbTransaction.createStatement(1);;
        
        int screenNumber = 0;
        int avaliableSeat = 0;
        try {
            // execute query and get result
            ResultSet result = stmt.executeQuery(strQuery);
            while(result.next()){
                screenNumber = result.getInt("SCREEN_NUMBER");
                avaliableSeat = result.getInt("AVALIABLE_SEAT");
                System.out.println("Get Screen Number --- " + screenNumber);
                System.out.println("Get Avaliable Seat --- " + avaliableSeat);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        if(flag == "getScreenNumber") {
            return screenNumber;
        }else{
            return avaliableSeat;
        }
    }
}
